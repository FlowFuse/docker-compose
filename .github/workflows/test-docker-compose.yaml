name: Test Docker Compose

on:
  push:
    branches:
      - main
      - '!release-*'
  pull_request:
    branches:
      - main


jobs:
  wait-for-containers-build:
    name: Wait for container images build
    runs-on: ubuntu-latest
    if: | 
      !startsWith(github.head_ref, 'release-')
    steps:
      - name: Generate a token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_APP_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}

      - name: Wait for container images build
        run: |
          while :; do
            result=$(gh api repos/:owner/:repo/actions/workflows | jq -r '.workflows[] | select(.name=="Build and push containers") | .id' | xargs -I {} gh api repos/:owner/:repo/actions/workflows/{}/runs --jq '.workflow_runs | max_by(.run_number)')
            status=$(echo "$result" | jq -r '.status')
            conclusion=$(echo "$result" | jq -r '.conclusion')
            if [[ "$status" == "completed" ]]; then
              if [[ "$conclusion" == "success" ]]; then
                echo "Build and push containers workflow completed successfully"
                break
              else
                echo "Build and push containers workflow failed"
                exit 1
              fi
            elif [[ "$status" == "in_progress" ]]; then
              echo "Build and push containers workflow is still running"
              sleep 60
            else
              echo "Build and push containers workflow returned unexpected status: $status"
              exit 1
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  default-stack:
    name: Test default stack
    needs: wait-for-containers-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env file for default settings
        run: |
          cp .env.example .env
          sed -i 's/DOMAIN=.*/DOMAIN=ci-example.com/' .env

      - name: Create stack
        uses: hoverkraft-tech/compose-action@v2.1.0
        with:
          compose-file: "./docker-compose.yml"
          up-flags: "-d --quiet-pull"

      - name: Check readiness
        run: |
          has_healthcheck() {
            local container=$1
            local health_status=$(docker inspect --format='{{if .Config.Healthcheck}}true{{else}}false{{end}}' "$container")
            [ "$health_status" = "true" ]
          }
          
          check_containers() {
            containers=$(docker compose ps -q)
            for container in $containers; do
              container_name=$(docker inspect --format '{{.Name}}' "$container" | sed 's/\///')
              container_ip=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$container")
              
              if has_healthcheck "$container"; then
                echo "Container has healthcheck defined"
                status=$(docker inspect --format "{{.State.Health.Status}}" "$container")
                if [ "$status" != "healthy" ]; then
                  echo "❌ Container $container_name is not healthy (status: $status)"
                return 1
            fi
              else
                running=$(docker inspect --format "{{.State.Running}}" "$container")
                if [ "$running" != "true" ]; then
                  echo "❌ Container $container_name is not running"
                  return 1
                fi
              fi
              
              echo "✅ Container $container_name is ready"
            done
            return 0
          }
          
          # Wait for containers with timeout
          TIMEOUT=300  # 5 minutes timeout
          ELAPSED=0
          SLEEP_TIME=10
          
          until check_containers; do
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "❌ Timeout waiting for containers to be ready"
              docker compose ps
              docker compose logs
              exit 1
            fi
            echo "⏳ Waiting for containers... ($ELAPSED seconds elapsed)"
            sleep $SLEEP_TIME
            ELAPSED=$((ELAPSED + SLEEP_TIME))
          done
          
          echo "✅ All containers are ready!"
          docker compose ps

      - name: Tear down the stack
        if: always()
        run: docker compose down


  quick-start-stack:
    name: Test quick-start stack
    needs: wait-for-containers-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env file for default settings
        run: |
          cp .env.example .env
          sed -i 's/DOMAIN=.*/DOMAIN=ci-example.com/' .env

      - name: Create stack
        uses: hoverkraft-tech/compose-action@v2.1.0
        with:
          compose-file: "./docker-compose-quick-start.yml"
          up-flags: "-d --quiet-pull"

      - name: Check readiness
        run: |
          has_healthcheck() {
            local container=$1
            local health_status=$(docker inspect --format='{{if .Config.Healthcheck}}true{{else}}false{{end}}' "$container")
            [ "$health_status" = "true" ]
          }
          
          check_containers() {
            containers=$(docker compose ps -q)
            for container in $containers; do
              container_name=$(docker inspect --format '{{.Name}}' "$container" | sed 's/\///')
              container_ip=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$container")
              
              if has_healthcheck "$container"; then
                echo "Container has healthcheck defined"
                status=$(docker inspect --format "{{.State.Health.Status}}" "$container")
                if [ "$status" != "healthy" ]; then
                  echo "❌ Container $container_name is not healthy (status: $status)"
                return 1
            fi
              else
                running=$(docker inspect --format "{{.State.Running}}" "$container")
                if [ "$running" != "true" ]; then
                  echo "❌ Container $container_name is not running"
                  return 1
                fi
              fi
              
              echo "✅ Container $container_name is ready"
            done
            return 0
          }
          
          # Wait for containers with timeout
          TIMEOUT=300  # 5 minutes timeout
          ELAPSED=0
          SLEEP_TIME=10
          
          until check_containers; do
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "❌ Timeout waiting for containers to be ready"
              docker compose ps
              docker compose logs
              exit 1
            fi
            echo "⏳ Waiting for containers... ($ELAPSED seconds elapsed)"
            sleep $SLEEP_TIME
            ELAPSED=$((ELAPSED + SLEEP_TIME))
          done
          
          echo "✅ All containers are ready!"
          docker compose ps

      - name: Tear down the stack
        if: always()
        run: docker compose down
