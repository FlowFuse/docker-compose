name: flowfuse

configs:
  flowfuse:
    content: |
      port: 3000
      host: 0.0.0.0
      domain: ${DOMAIN:?error}
      base_url: http${TLS_ENABLED:+s}://forge.${DOMAIN:?error}
      api_url: http://forge:3000
      create_admin: ${CREATE_ADMIN:-false}
      db:
        logging: false
        type: postgres
        host: ${DB_HOST:-postgres}
        user: ${DB_USER:-forge}
        password: ${DB_PASSWORD:-secret}
      email:
        enabled: ${EMAIL_ENABLED:-false}
        from: '"FlowFuse" <flowfuse@${DOMAIN:?error}>'
        smtp:
          host: ${EMAIL_HOST}
          port: ${EMAIL_PORT:-587}
          secure: ${EMAIL_SECURE:-false}
          auth:
            user: ${EMAIL_USER}
            pass: ${EMAIL_PASSWORD}
      driver:
        type: docker
        options:
          socket: /tmp/docker.sock
      broker:
        url: mqtt://teamBroker:1883
        public_url: ws${TLS_ENABLED:+s}://mqtt.${DOMAIN:?error}
        teamBroker:
          enabled: true
      fileStore:
        enable: true
        url: http://file-server:3001
  flowfuse_storage:
    content: |
      port: 3001
      host: 0.0.0.0
      base_url: http://forge:3000
      driver:
        type: localfs
        quota: 104857600
        options:
          root: var/root
      context:
        type: sequelize
        quota: 1048576
        options:
          type: postgres
          host: ${DB_HOST:-postgres}
          database: ff-context
          username: ${DB_USER:-forge}
          password: ${DB_PASSWORD:-secret}
  nginx:
    content: |
      client_max_body_size 5m;
  nginx_tls_crt:
    environment: TLS_CERTIFICATE
  nginx_tls_key:
    environment: TLS_KEY
  nginx_stream:
    content: |
      # stream {
      #  server {
      #    listen 1884 ssl;
      #    ssl_protocols TLSv1.2;
      #    ssl_certificate /etc/nginx/certs/${DOMAIN}.crt;
      #    ssl_certificate_key /etc/nginx/certs/${DOMAIN}.key;
      #    proxy_pass teamBroker:1883;
      #  }
      #}
  postgres_db_setup:
    content: |
      #!/bin/sh
      set -e
      psql -v ON_ERROR_STOP=1 -U root <<-ESQL
        CREATE USER ${DB_USER:-forge} WITH PASSWORD '${DB_PASSWORD:-secret}';
        CREATE DATABASE flowforge;
        GRANT ALL PRIVILEGES ON DATABASE flowforge TO ${DB_USER:-forge};
      ESQL
  postgres_context_setup:
    content: |
      #!/bin/sh
      set -e
      psql -v ON_ERROR_STOP=1 -U root <<-ESQL
        SELECT 'CREATE DATABASE "ff-context"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ff-context')\gexec
        GRANT ALL PRIVILEGES ON DATABASE "ff-context" TO "${DB_USER:-forge}";
      ESQL
  emqx:
    content: |
      authentication = [
        {
          backend = http
          body {
            clientId = "$${clientid}"
            password = "$${password}"
            username = "$${username}"
          }
          connect_timeout = "15s"
          enable = true
          enable_pipelining = 1
          headers {
            content-type = "application/json"
          }
          mechanism = password_based
          method = post
          pool_size = 8
          request_timeout = "15s"
          ssl {
            ciphers = []
            depth = 10
            enable = false
            hibernate_after = "5s"
            log_level = notice
            reuse_sessions = true
            secure_renegotiate = true
            verify = verify_peer
            versions = [
              "tlsv1.3",
              "tlsv1.2"
            ]
          }
          url = "http://forge:3000/api/comms/v2/auth"
        },
        {
          backend = built_in_database
          bootstrap_file = "$${EMQX_ETC_DIR}/auth-built-in-db-bootstrap.csv"
          bootstrap_type = plain
          enable = true
          mechanism = password_based
          password_hash_algorithm {name = plain, salt_position = disable}
          user_id_type = username
        }
      ]
      authorization {
        cache {
          enable = true
          excludes = []
          max_size = 32
          ttl = "1m"
        }
        deny_action = ignore
        no_match = allow
        sources = [
          {
            body {
              action = "$${action}"
              topic = "$${topic}"
              username = "$${username}"
            }
            connect_timeout = "15s"
            enable = true
            enable_pipelining = 1
            headers {
              content-type = "application/json"
            }
            method = post
            pool_size = 8
            request_timeout = "30s"
            ssl {
              ciphers = []
              depth = 10
              enable = false
              hibernate_after = "5s"
              log_level = notice
              reuse_sessions = true
              secure_renegotiate = true
              verify = verify_peer
              versions = [
                "tlsv1.3",
                "tlsv1.2"
              ]
            }
            type = http
            url = "http://forge:3000/api/comms/v2/acls"
          }
        ]
      }
      listeners {
        ssl {
          default {
            acceptors = 16
            access_rules = [
              "allow all"
            ]
            bind = "0.0.0.0:8883"
            enable = false
            enable_authn = true
            max_conn_rate = infinity
            max_connections = infinity
            mountpoint = "$${client_attrs.team}"
            proxy_protocol = false
            proxy_protocol_timeout = "3s"
            ssl_options {
              cacertfile = "$${EMQX_ETC_DIR}/certs/cacert.pem"
              certfile = "$${EMQX_ETC_DIR}/certs/cert.pem"
              ciphers = []
              client_renegotiation = true
              depth = 10
              enable_crl_check = false
              fail_if_no_peer_cert = false
              gc_after_handshake = false
              handshake_timeout = "15s"
              hibernate_after = "5s"
              honor_cipher_order = true
              keyfile = "$${EMQX_ETC_DIR}/certs/key.pem"
              log_level = notice
              ocsp {
                enable_ocsp_stapling = false
                refresh_http_timeout = "15s"
                refresh_interval = "5m"
              }
              reuse_sessions = true
              secure_renegotiate = true
              verify = verify_none
              versions = [
                "tlsv1.3",
                "tlsv1.2"
              ]
            }
            tcp_options {
              active_n = 100
              backlog = 1024
              buffer = "4KB"
              high_watermark = "1MB"
              keepalive = none
              nodelay = true
              reuseaddr = true
              send_timeout = "15s"
              send_timeout_close = true
            }
            zone = default
          }
        }
        tcp {
          default {
            acceptors = 16
            access_rules = [
              "allow all"
            ]
            bind = "0.0.0.0:1883"
            enable = true
            enable_authn = true
            max_conn_rate = infinity
            max_connections = infinity
            mountpoint = "$${client_attrs.team}"
            proxy_protocol = false
            proxy_protocol_timeout = "3s"
            tcp_options {
              active_n = 100
              backlog = 1024
              buffer = "4KB"
              high_watermark = "1MB"
              keepalive = none
              nodelay = true
              reuseaddr = true
              send_timeout = "15s"
              send_timeout_close = true
            }
            zone = default
          }
        }
        ws {
          default {
            acceptors = 16
            access_rules = [
              "allow all"
            ]
            bind = "0.0.0.0:8083"
            enable = true
            enable_authn = true
            max_conn_rate = infinity
            max_connections = infinity
            mountpoint = "$${client_attrs.team}"
            proxy_protocol = false
            proxy_protocol_timeout = "3s"
            tcp_options {
              active_n = 100
              backlog = 1024
              buffer = "4KB"
              high_watermark = "1MB"
              keepalive = none
              nodelay = true
              reuseaddr = true
              send_timeout = "15s"
              send_timeout_close = true
            }
            websocket {
              allow_origin_absence = true
              check_origin_enable = false
              check_origins = "http://localhost:18083, http://127.0.0.1:18083"
              compress = false
              deflate_opts {
                client_context_takeover = takeover
                client_max_window_bits = 15
                mem_level = 8
                server_context_takeover = takeover
                server_max_window_bits = 15
                strategy = default
              }
              fail_if_no_subprotocol = true
              idle_timeout = "7200s"
              max_frame_size = infinity
              mqtt_path = "/"
              mqtt_piggyback = multiple
              proxy_address_header = "x-forwarded-for"
              proxy_port_header = "x-forwarded-port"
              supported_subprotocols = "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5"
              validate_utf8 = true
            }
            zone = default
          }
        }
        wss {
          default {
            acceptors = 16
            access_rules = [
              "allow all"
            ]
            bind = "0.0.0.0:8084"
            enable = false
            enable_authn = true
            max_conn_rate = infinity
            max_connections = infinity
            mountpoint = "$${client_attrs.team}"
            proxy_protocol = false
            proxy_protocol_timeout = "3s"
            ssl_options {
              cacertfile = "$${EMQX_ETC_DIR}/certs/cacert.pem"
              certfile = "$${EMQX_ETC_DIR}/certs/cert.pem"
              ciphers = []
              client_renegotiation = true
              depth = 10
              fail_if_no_peer_cert = false
              handshake_timeout = "15s"
              hibernate_after = "5s"
              honor_cipher_order = true
              keyfile = "$${EMQX_ETC_DIR}/certs/key.pem"
              log_level = notice
              reuse_sessions = true
              secure_renegotiate = true
              verify = verify_none
              versions = [
                "tlsv1.3",
                "tlsv1.2"
              ]
            }
            tcp_options {
              active_n = 100
              backlog = 1024
              buffer = "4KB"
              high_watermark = "1MB"
              keepalive = none
              nodelay = true
              reuseaddr = true
              send_timeout = "15s"
              send_timeout_close = true
            }
            websocket {
              allow_origin_absence = true
              check_origin_enable = false
              check_origins = "http://localhost:18083, http://127.0.0.1:18083"
              compress = false
              deflate_opts {
                client_context_takeover = takeover
                client_max_window_bits = 15
                mem_level = 8
                server_context_takeover = takeover
                server_max_window_bits = 15
                strategy = default
              }
              fail_if_no_subprotocol = true
              idle_timeout = "7200s"
              max_frame_size = infinity
              mqtt_path = "/"
              mqtt_piggyback = multiple
              proxy_address_header = "x-forwarded-for"
              proxy_port_header = "x-forwarded-port"
              supported_subprotocols = "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5"
              validate_utf8 = true
            }
            zone = default
          }
        }
      }
      api_key {
        bootstrap_file = "/mounted/config/api-keys"
      }
  emqx-api:
    content: |
      flowfuse:verySecret:administrator

services:
  nginx:
    image: nginxproxy/nginx-proxy:1.6.0
    networks:
      - flowforge 
    restart: always
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "nginx-proxy-certs:/etc/nginx/certs"
      - "nginx-proxy-html:/usr/share/nginx/html"
    configs:
      - source: nginx
        target: /etc/nginx/conf.d/my_proxy.conf
      - source: nginx_tls_crt
        target: /etc/nginx/certs/${DOMAIN:?error}.crt
      - source: nginx_tls_key
        target: /etc/nginx/certs/${DOMAIN:?error}.key
      - source: nginx_stream
        target: /etc/nginx/toplevel.conf.d/mqtt.conf
    ports:
      - "80:80"
      - "443:443"
      - "1884:1884"
    environment:
      - "HTTPS_METHOD=redirect"

  postgres:
    image: postgres:14
    networks: 
      - flowforge
    restart: always
    environment:
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: root
    configs:
      - source: postgres_db_setup
        target: /docker-entrypoint-initdb.d/01-setup-db.sh
      - source: postgres_context_setup
        target: /docker-entrypoint-initdb.d/02-setup-context-db.sh
    volumes:
      - db:/var/lib/postgresql/data
  teamBroker:
    image: emqx/emqx:5.8.0
    networks:
      - flowforge
    ports:
      - 1883:1883
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx", "ctl", "status"]
      interval: 5s
      timeout: 25s
      retries: 5
    environment:
      - "VIRTUAL_HOST=broker.${DOMAIN:?error}"
      - "VIRTUAL_PORT=8080"
      - "LETSENCRYPT_HOST=broker.${DOMAIN:?error}"
      - "EMQX_DASHBOARD__DEFAULT_PASSWORD=topSecret"
    configs:
      - source: emqx
        target: /opt/emqx/data/configs/cluster.hocon
      - source: emqx-api
        target: /mounted/config/api-keys
    volumes:
      - emqx:/opt/emqx/data
  forge:
    image: "flowfuse/forge-docker:2.10.0"
    networks: 
      - flowforge
    restart: always
    environment:
      - "VIRTUAL_HOST=forge.${DOMAIN:?error}"
      - "LETSENCRYPT_HOST=forge.${DOMAIN:?error}"
    configs:
      - source: flowfuse
        target: /usr/src/forge/etc/flowforge.yml
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"
      - flowfuse-persistent-storage:/opt/persistent-storage
    depends_on:
      - "postgres"
      - "nginx"
      - "teamBroker"

  file-server:
    image: "flowfuse/file-server:2.10.0"
    networks:
      - flowforge
    restart: always
    configs:
      - source: flowfuse_storage
        target: /usr/src/flowforge-file-server/etc/flowforge-storage.yml
    volumes:
      - fileStorage:/usr/src/flowforge-file-server/var/root
    depends_on:
      - "forge"

  acme:
    image: nginxproxy/acme-companion:2.4.0
    networks:
      - flowforge
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "acme:/etc/acme.sh"
    volumes_from:
      - nginx:rw
    environment:
      - "DEFAULT_EMAIL=mail@${DOMAIN:?error}"
    depends_on:
      - "nginx"
    profiles:
      - autotls

  # npm:
  #   image: "verdaccio/verdaccio:5"
  #   networks:
  #     - flowforge
  #   restart: always
  #   environment:
  #     - "VIRTUAL_HOST=npm.${DOMAIN:?error}"
  #     - "VIRTUAL_PORT=4873"
  #   volumes:
  #     - "./npm/conf:/verdaccio/conf"
  #     - "./npm/storage:/verdaccio/storage"
  #   depends_on:
  #     - nginx

networks:
  flowforge:

volumes:
  flowfuse-persistent-storage:
  db:
  nginx-proxy-certs:
  nginx-proxy-html:
  fileStorage:
  acme:
  emqx:
