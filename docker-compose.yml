name: flowfuse

configs:
  flowfuse:
    content: |
      port: 3000
      host: 0.0.0.0
      domain: ${DOMAIN:?error}
      base_url: http${TLS_ENABLED:+s}://forge.${DOMAIN:?error}
      api_url: http://forge:3000
      create_admin: ${CREATE_ADMIN:-false}
      db:
        logging: false
        type: postgres
        host: ${DB_HOST:-postgres}
        user: ${DB_USER:-forge}
        password: ${DB_PASSWORD:-secret}
      email:
        enabled: ${EMAIL_ENABLED:-false}
        from: '"FlowFuse" <flowfuse@${DOMAIN:?error}>'
        smtp:
          host: ${EMAIL_HOST}
          port: ${EMAIL_PORT:-587}
          secure: ${EMAIL_SECURE:-false}
          auth:
            user: ${EMAIL_USER}
            pass: ${EMAIL_PASSWORD}
      driver:
        type: docker
        options:
          socket: /tmp/docker.sock
      broker:
        url: mqtt://broker:1883
        public_url: ws${TLS_ENABLED:+s}://mqtt.${DOMAIN:?error}
      fileStore:
        enable: true
        url: http://file-server:3001
  flowfuse_broker:
    content: |
      per_listener_settings false
      allow_anonymous false
      listener 1883 0.0.0.0
      listener 1884 0.0.0.0
      protocol websockets
      auth_plugin /mosquitto/go-auth.so
      auth_opt_backends http
      auth_opt_hasher bcrypt
      auth_opt_cache true
      auth_opt_auth_cache_seconds 30
      auth_opt_acl_cache_seconds 90
      auth_opt_auth_jitter_second 3
      auth_opt_acl_jitter_seconds 5
      auth_opt_http_host forge
      auth_opt_http_port 3000
      auth_opt_http_getuser_uri /api/comms/auth/client
      auth_opt_http_aclcheck_uri /api/comms/auth/acl
  flowfuse_storage:
    content: |
      port: 3001
      host: 0.0.0.0
      base_url: http://forge:3000
      driver:
        type: localfs
        quota: 104857600
        options:
          root: var/root
      context:
        type: sequelize
        quota: 1048576
        options:
          type: postgres
          host: ${DB_HOST:-postgres}
          database: ff-context
          username: ${DB_USER:-forge}
          password: ${DB_PASSWORD:-secret}
  nginx:
    content: |
      client_max_body_size 5m;
  nginx_tls_crt:
    environment: TLS_CERTIFICATE
  nginx_tls_key:
    environment: TLS_KEY
  postgres_db_setup:
    content: |
      #!/bin/sh
      set -e
      psql -v ON_ERROR_STOP=1 -U root <<-ESQL
        CREATE USER ${DB_USER:-forge} WITH PASSWORD '${DB_PASSWORD:-secret}';
        CREATE DATABASE flowforge;
        GRANT ALL PRIVILEGES ON DATABASE flowforge TO ${DB_USER:-forge};
      ESQL
  postgres_context_setup:
    content: |
      #!/bin/sh
      set -e
      psql -v ON_ERROR_STOP=1 -U root <<-ESQL
        SELECT 'CREATE DATABASE "ff-context"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ff-context')\gexec
        GRANT ALL PRIVILEGES ON DATABASE "ff-context" TO "${DB_USER:-forge}";
      ESQL

services:
  nginx:
    image: nginxproxy/nginx-proxy:1.6.0
    networks:
      - flowforge 
    restart: always
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "nginx-proxy-certs:/etc/nginx/certs"
      - "nginx-proxy-html:/usr/share/nginx/html"
    configs:
      - source: nginx
        target: /etc/nginx/conf.d/my_proxy.conf
      - source: nginx_tls_crt
        target: /etc/nginx/certs/${DOMAIN:?error}.crt
      - source: nginx_tls_key
        target: /etc/nginx/certs/${DOMAIN:?error}.key
    ports:
      - "80:80"
      - "443:443"
    environment:
      - "HTTPS_METHOD=redirect"
    healthcheck:
      test: |
        response=$$(curl -s -o /dev/null -w "%{http_code}" http://localhost);
        if [ $$response = "503" ]; then
          exit 0;
        else
          exit 1;
        fi
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:14
    networks: 
      - flowforge
    restart: always
    environment:
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: root
    configs:
      - source: postgres_db_setup
        target: /docker-entrypoint-initdb.d/01-setup-db.sh
      - source: postgres_context_setup
        target: /docker-entrypoint-initdb.d/02-setup-context-db.sh
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  broker:
    image: "iegomez/mosquitto-go-auth:latest-mosquitto_2.0.15"
    networks:
      - flowforge
    restart: always
    ulimits:
      nofile: 2048
    environment:
      - "VIRTUAL_HOST=mqtt.${DOMAIN:?error}"
      - "VIRTUAL_PORT=1884"
      - "LETSENCRYPT_HOST=mqtt.${DOMAIN:?error}"
    configs:
      - source: flowfuse_broker
        target: /etc/mosquitto/mosquitto.conf

  forge:
    image: "flowfuse/forge-docker:2.10.0"
    networks: 
      - flowforge
    restart: always
    environment:
      - "VIRTUAL_HOST=forge.${DOMAIN:?error}"
      - "LETSENCRYPT_HOST=forge.${DOMAIN:?error}"
    configs:
      - source: flowfuse
        target: /usr/src/forge/etc/flowforge.yml
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"
      - flowfuse-persistent-storage:/opt/persistent-storage
    depends_on:
      - "postgres"
      - "nginx"
      - "broker"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  file-server:
    image: "flowfuse/file-server:2.10.0"
    networks:
      - flowforge
    restart: always
    configs:
      - source: flowfuse_storage
        target: /usr/src/flowforge-file-server/etc/flowforge-storage.yml
    volumes:
      - fileStorage:/usr/src/flowforge-file-server/var/root
    depends_on:
      - "forge"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  acme:
    image: nginxproxy/acme-companion:2.4.0
    networks:
      - flowforge
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "acme:/etc/acme.sh"
    volumes_from:
      - nginx:rw
    environment:
      - "DEFAULT_EMAIL=mail@${DOMAIN:?error}"
    depends_on:
      - "nginx"
    profiles:
      - autotls

  # npm:
  #   image: "verdaccio/verdaccio:5"
  #   networks:
  #     - flowforge
  #   restart: always
  #   environment:
  #     - "VIRTUAL_HOST=npm.${DOMAIN:?error}"
  #     - "VIRTUAL_PORT=4873"
  #   volumes:
  #     - "./npm/conf:/verdaccio/conf"
  #     - "./npm/storage:/verdaccio/storage"
  #   depends_on:
  #     - nginx

networks:
  flowforge:

volumes:
  flowfuse-persistent-storage:
  db:
  nginx-proxy-certs:
  nginx-proxy-html:
  fileStorage:
  acme:
